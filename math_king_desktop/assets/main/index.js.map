{"version":3,"sources":["assets/Script/IngameScene.js","assets/Script/InputFrameController.js","assets/Script/LandingScene.js","assets/Script/ResultPopup.js","assets/Script/RiddleFrameController.js","assets/Script/component/ScoreLabel.js","assets/Script/constants.js","assets/Script/lib/helpers.js","assets/Script/lib/riddleGenerate.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;AACI;AAEA;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATQ;AAYZ;AAEA;AACI;AACA;AACA;AACA;AACA;AACH;AAED;AACI;AACA;AACA;AACH;AAED;AAAW;;AACP;AACI;AACA;AACA;AAEA;AACA;;AAEA;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACU;AAAuB;AAAxB;AAGL;AACH;AACJ;AACJ;AACJ;AAED;AAAoB;;AAChB;AACA;AACI;AACA;;AACA;AACH;AACJ;AAED;AACI;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACH;AAED;AAAkB;;AACd;AAGQ;;AACA;AACH;AACW;AAAS;AAAU;AAAZ;AAAT;AAEE;AAAS;AAAa;AAAf;AAAT;AAEN;;AACA;AACH;AACU;AAAS;AAAY;AAAd;AAAT;AACE;AAAS;AAAY;AAAd;AAAT;AACK;AAAO;AAE5B;AAED;AACI;AACA;AACA;AACH;AAED;AACI;AACA;AACA;AACA;AACH;AAED;AAAuB;;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACI;AACI;AACH;AACG;AACH;;AACD;AACA;AACA;AAEA;AAEc;AAAD;AAEL;AACH;AACS;AAAD;AACC;AAAD;AACC;AAAD;AACC;AAAD;AACC;AAAD;;AAGb;AACI;AACA;AACA;AACA;AACA;AAEc;AAAS;AAAU;AAAZ;AAAR;AAEC;AAAD;AAEL;AACH;AAER;AACJ;;AAED;AACc;AAAuB;AAAxB;AAEC;AAAyB;AAA1B;AAEL;AACA;;AACA;AACI;AACH;AACG;;AACA;AACH;AACJ;AACR;AAED;AACI;AACA;AACH;AAED;AACI;AACH;AApMI;;;;;;;;;;ACPT;AACA;AACA;AACA;AACA;AACA;AAEA;AACI;AACA;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBQ;AAmBZ;AAEA;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACH;AAED;AAIA;AACI;AACI;AACH;AACJ;AAED;AACI;AACI;AACA;AACH;;AACD;AACI;AACA;AACI;AACA;;AACJ;AACA;AACI;AACA;;AACJ;AACA;AACI;AACA;;AACJ;AACA;AACI;AACA;;AACJ;AACA;AACI;AACA;;AACJ;AACA;AACI;AACA;;AACJ;AACA;AACI;AACA;;AACJ;AACA;AACI;AACA;;AACJ;AACI;AACI;AACA;AACH;;AACL;AACI;AACA;;AACJ;AACA;AACI;AACA;;AACJ;AACI;AACA;;AACJ;AACA;AACI;AACA;;AACJ;AACI;AACA;;AACJ;AACA;AACI;AACA;;AACJ;AACA;AACA;AACI;AACA;;AACJ;AACI;AACI;AACA;AACH;;AACL;AACA;AACA;AACI;AACA;AAzER;AA2EH;AAED;AACI;AACI;AACI;AACA;;AACJ;AACI;AACA;;AACJ;AACI;AACA;;AACJ;AACI;AACA;;AACJ;AACI;AACA;;AACJ;AACI;AACA;;AACJ;AACI;AACA;;AACJ;AACI;AACA;;AACJ;AACI;AACA;;AACJ;AACI;AACA;;AACJ;AACI;AACA;;AACJ;AACI;AACA;;AACJ;AACI;AACA;;AACJ;AACI;AACA;;AACJ;AACI;AACA;;AACJ;AACI;AACA;;AACJ;AACI;AAlDR;AAoDH;;AA/LI;;;;;;;;;;ACPT;AACA;AACA;AACA;AACA;AACA;AAEA;AACI;AAEA;AAEI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfQ;AAkBZ;AAEA;AAEA;AAIA;AACI;AACH;;AA/BI;;;;;;;;;;ACPT;AACI;AAEA;AACI;AACA;AACA;AACA;AAJQ;AAOZ;AAEA;AAEA;AAIA;AAAkC;AAArB;AAAqB;;AAC9B;AACA;AACA;AACA;AAEA;AAEA;AACU;AAAQ;AAAU;AAAX;AAAR;AAEZ;AAED;AAAiB;;AACb;;AACA;AACI;AACA;AACH;AACG;AACU;AAAQ;AAAU;AAAX;AAAR;AAEL;AACH;AAEJ;AACJ;AAED;AACI;AACH;AAED;AACI;AACH;;AApDI;;;;;;;;;;ACAT;;AACA;;AAEA;AACI;AAEA;AACI;AACA;AACA;AACA;AACA;AALQ;AAQZ;AAEA;AACI;AACA;AACH;AAED;AAGA;AACI;AACA;;AACA;AACI;;AACA;AACI;AACA;AACH;AACJ;AACG;AACA;AACH;AACG;AACH;AACG;AACH;AACJ;AAED;AACI;AACA;AACH;AAED;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;;AAEA;AACI;AACI;AACA;AACA;;AACJ;AACI;AACA;AACA;;AACJ;AACI;AACA;AACA;;AACJ;AACI;AACA;AACA;AAhBR;;AAkBA;;AACA;;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACH;;AA5FI;;;;;;;;;;ACHT;AAEA;AACI;AAEA;AAGA;AAEA;AAEA;AACI;AACA;AACA;AACA;AACA;AAEA;AACA;AACH;AAED;AAAsC;AAArB;AAAqB;;AAClC;;AACA;AACI;AACA;AACA;AACH;AACG;AACA;AACH;AACJ;AAED;AACI;AACI;AACA;AACH;AACG;AACA;AACH;;AACD;AACI;AACA;AACH;AACJ;AA7CI;;;;;;;;;;ACFT;AACE;AACA;AACA;AACA;AACA;AALe;;;;;;;;;;ACAjB;AACI;AACH;;AAED;AACI;AAGH;;AAED;AACI;AACI;AACI;;AACJ;AACI;;AACJ;AACI;;AACJ;AACI;AACI;AACI;AACI;;AACJ;AACI;;AACJ;AACI;;AACJ;AACI;;AACJ;AACI;AAVR;AAYH;;AArBT;;AAuBA;AACH;;AACD;AACI;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACI;AACA;AACA;AACA;AAJG;AAMV;;AAED;AACI;AADyC;AAAA;AAAA;AAAA;AAGzC;AACA;;AACA;AACI;AACH;;AACD;AACI;AACH;;AACD;AACH;;;;;;;;;;ACnED;AACA;;AAEA;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACE;AACA;AACA;AACA;AACD;AACC;AACA;AACA;AACA;AACD;AACC;AACA;AACA;AACA;AACA;AACD;AACC;AACA;AACA;AACA;AACA;AACD;;AACD;;AACA;AACE;AACE;AACA;;AACF;AACE;AACA;;AACF;AACE;AACA;;AACF;AACE;AACA;AAZJ;;AAaC;AAED;AACE;AACA;AACA;AACA;AACA;AALK;AAOR","sourcesContent":["const RiddleFrameController = require('RiddleFrameController');\nconst ResultPopup = require('ResultPopup');\nconst ScoreLabel = require('./component/ScoreLabel');\nconst constants = require('./constants');\nconst helpers = require('./lib/helpers');\nconst riddleGenerate = require('./lib/riddleGenerate');\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        riddleFrameCtor: RiddleFrameController,\n        resultPopup: ResultPopup,\n        notificaitonText: cc.Label,\n        resultText: cc.Label,\n        timerProgressBar: cc.ProgressBar,\n        timerText: cc.Label,\n        questtionText: cc.Label,\n        scoreText: ScoreLabel,\n        chainText: cc.Label\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    onLoad() {\n        this.rand = require('random-seed').create();\n        this.rand.initState();\n        this.rand.seed(Math.random());\n        this.riddleFrameCtor.node.on('answer', this.onResult, this);\n        this.resultPopup.node.on('restart', this.onRestart, this);\n    },\n\n    start() {\n        this.resetAndStartGame();\n        this.resultPopup.node.active = true;\n        this.resultPopup.hide(true);\n    },\n\n    update(dt) {\n        if (this.isPlaying) {\n            this.timer -= dt * 1000;\n            this.timerText.string = helpers.formatTimer(this.timer + '');\n            this.timerProgressBar.progress = this.timer / constants.ROUND_DURATION;\n\n            this.chainTimer -= dt * 1000;\n            this.timerProgressBar.barSprite.node.color = new cc.Color(255, this.timer / constants.ROUND_DURATION * 255, this.timer / constants.ROUND_DURATION * 255, 255);\n\n            if (this.timer < 0) {\n                this.isPlaying = false;\n                this.riddleFrameCtor.locked = true;\n                this.resultText.string = 'TIME UP!';\n                this.resultText.node.color = new cc.Color().fromHEX('#d35400');\n                this.resultText.node.y = -30;\n                this.resultText.node.active = true;\n                this.resultText.node.opacity = 0;\n\n                cc.tween(this.resultText.node)\n                .to(0.3, {position: cc.v2(0, 0), opacity: 255})\n                .delay(0.7)\n                .call(() => {\n                    this.resultPopup.show(this.score);\n                }).start();\n            }\n        }\n    },\n\n    resetAndStartGame() {\n        this.reset();\n        this.animateGoText(() => {\n            this.notificaitonText.node.active = false;\n            this.riddleFrameCtor.node.active = true;\n            this.startNewRiddle();\n        });\n    },\n\n    reset() {\n        this.isPlaying = false;\n\n        this.questionNumber = 1;\n        this.chain = 0;\n        this.timer = constants.ROUND_DURATION;\n        this.chainTimer = 0;\n        this.score = 0;\n        this.displayingScore = 0;\n\n        this.chainText.node.active = false;\n        this.resultText.node.active = false;\n        this.riddleFrameCtor.node.active = false;\n        this.notificaitonText.node.active = true;\n        this.notificaitonText.node.setScale(0);\n        this.timerProgressBar.progress = 1;\n\n        this.timerText.string = helpers.formatTimer(this.timer + '');\n        this.questtionText.string = 'Question ' + this.questionNumber;\n        this.scoreText.setScore(this.score, true);\n    },\n\n    animateGoText(cb) {\n        cc.tween(this.notificaitonText.node)\n            .delay(0.4)\n            .call(() => {\n                this.notificaitonText.node.setScale(0.3);\n                this.notificaitonText.string = 'READY'\n            })\n            .to(0.35, { scale: { value: 1, easing: 'sineOut' } })\n            .delay(0.2)\n            .to(0.35, { scale: { value: 0.35, easing: 'sineIn' } })\n            .call(() => {\n                this.notificaitonText.node.setScale(0.4);\n                this.notificaitonText.string = 'GO!'\n            })\n            .to(0.5, { scale: { value: 1.3, easing: 'sineOut' } })\n            .to(0.3, { scale: { value: 1.2, easing: 'sineIn' } })\n            .call(() => { cb(); })\n            .start();\n    },\n\n    nextRiddle () {\n        this.questionNumber++;\n        this.questtionText.string = 'Question ' + this.questionNumber;\n        this.startNewRiddle();\n    },\n\n    startNewRiddle() {\n        let riddleData = riddleGenerate(this.getCurrentDifficulty(), this.rand);\n        this.riddleFrameCtor.optainNewRiddle(riddleData);\n        this.isPlaying = true;\n        this.chainTimer = constants.CHAIN_DURATION;\n    },\n\n    onResult(answerResult) {\n        this.riddleFrameCtor.locked = true;\n        let isCorrect = answerResult === 'correct';\n        this.resultText.string = isCorrect ? 'CORRECT' : 'INCORRECT';\n        this.resultText.node.color = new cc.Color().fromHEX(isCorrect ? '#16a085' : '#d35400');\n        this.resultText.node.y = -30;\n        this.resultText.node.active = true;\n        this.resultText.node.opacity = 0;\n\n        //Scoring\n        if (isCorrect) {\n            if (this.chainTimer > 0) {\n                this.chain = Math.min(++this.chain, constants.MAX_CHAIN);\n            } else {\n                this.chain = 0;\n            }\n            let gainedScore = constants.SCORING * Math.max(this.chain, 1);\n            let animatedStepScore = gainedScore / 6;\n            this.score += gainedScore;\n            \n            cc.tween(this.scoreText.node)\n                .delay(0.2)\n                .to(0.1, {color: new cc.Color().fromHEX('#ffffff')})\n                .call(()=> {\n                    this.scoreText.setScore(this.score);\n                })\n                .to(0.1, {color: new cc.Color().fromHEX('#ffffff')})\n                .to(0.1, {color: new cc.Color().fromHEX('#e67e22')})\n                .to(0.1, {color: new cc.Color().fromHEX('#ffffff')})\n                .to(0.1, {color: new cc.Color().fromHEX('#e67e22')})\n                .to(0.1, {color: new cc.Color().fromHEX('#ffffff')})\n                .start();\n\n            if (this.chain > 1) {\n                this.chainText.node.active = true;\n                this.chainText.node.x = this.scoreText.node.width / 2 - 10;\n                this.chainText.node.setScale(0);\n                this.chainText.string = `Chain x${this.chain}`;\n                cc.tween(this.chainText.node)\n                    .delay(0.2)\n                    .to(0.2, {scale: { value: 1, easing: 'bounceOut' }})\n                    .delay(0.3)\n                    .to(0.2, {scale: 0})\n                    .call(() => {\n                        this.chainText.node.active = false;\n                    })\n                    .start();\n            }\n        }\n\n        cc.tween(this.resultText.node)\n            .to(0.2, {position: cc.v2(0, 0), opacity: 255})\n            .delay(0.4)\n            .to(0.2, {position: cc.v2(0, -30), opacity: 0})\n            .call(() => {\n                this.resultText.node.active = false;\n                this.riddleFrameCtor.locked = false;\n                if (isCorrect) {\n                    this.nextRiddle();\n                } else {\n                    this.riddleFrameCtor.clearInput();\n                    this.chainTimer = -1;\n                }\n            }).start();\n    },\n\n    onRestart () {\n        this.resultPopup.hide();\n        this.resetAndStartGame()\n    },\n\n    getCurrentDifficulty () {\n        return ~~(this.currentQuestion / constants.DIFFICULTY_STEP) + 1;\n    }\n});\n","// Learn cc.Class:\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\n\ncc.Class({\n    extends: cc.Component,\n    properties: {\n        button_0: cc.Button,\n        button_1: cc.Button,\n        button_2: cc.Button,\n        button_3: cc.Button,\n        button_4: cc.Button,\n        button_5: cc.Button,\n        button_6: cc.Button,\n        button_7: cc.Button,\n        button_8: cc.Button,\n        button_9: cc.Button,\n        button_Plus: cc.Button,\n        button_Minus: cc.Button,\n        button_Multiple: cc.Button,\n        button_Divide: cc.Button,\n        button_C: cc.Button,\n        button_Enter: cc.Button,\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    onLoad () {\n        this.isKeyboardShifed = false;\n        this.button_0.node.on('click', this.onButtonClicked, this);\n        this.button_1.node.on('click', this.onButtonClicked, this);\n        this.button_2.node.on('click', this.onButtonClicked, this);\n        this.button_3.node.on('click', this.onButtonClicked, this);\n        this.button_4.node.on('click', this.onButtonClicked, this);\n        this.button_5.node.on('click', this.onButtonClicked, this);\n        this.button_6.node.on('click', this.onButtonClicked, this);\n        this.button_7.node.on('click', this.onButtonClicked, this);\n        this.button_8.node.on('click', this.onButtonClicked, this);\n        this.button_9.node.on('click', this.onButtonClicked, this);\n        this.button_Plus.node.on('click', this.onButtonClicked, this);\n        this.button_Minus.node.on('click', this.onButtonClicked, this);\n        this.button_Multiple.node.on('click', this.onButtonClicked, this);\n        this.button_Divide.node.on('click', this.onButtonClicked, this);\n        this.button_C.node.on('click', this.onButtonClicked, this);\n        this.button_Enter.node.on('click', this.onButtonClicked, this);\n\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_UP, this.onKeyPressed, this);\n    },\n\n    start () {\n\n    },\n\n    onKeyDown (event) {\n        if (event.keyCode === cc.macro.KEY.shift) {\n            this.isKeyboardShifed = true;\n        }\n    },\n\n    onKeyPressed (event) {\n        if (event.keyCode === cc.macro.KEY.shift) {\n            this.isKeyboardShifed = false;\n            return;\n        }\n        switch(event.keyCode) {\n            case cc.macro.KEY['0']:\n            case cc.macro.KEY.num0:\n                this.node.emit('input', 0);\n                break;\n            case cc.macro.KEY['1']:\n            case cc.macro.KEY.num1:\n                this.node.emit('input', 1);\n                break;\n            case cc.macro.KEY['2']:\n            case cc.macro.KEY.num2:\n                this.node.emit('input', 2);\n                break;\n            case cc.macro.KEY['3']:\n            case cc.macro.KEY.num3:\n                this.node.emit('input', 3);\n                break;\n            case cc.macro.KEY['4']:\n            case cc.macro.KEY.num4:\n                this.node.emit('input', 4);\n                break;\n            case cc.macro.KEY['5']:\n            case cc.macro.KEY.num5:\n                this.node.emit('input', 5);\n                break;\n            case cc.macro.KEY['6']:\n            case cc.macro.KEY.num6:\n                this.node.emit('input', 6);\n                break;\n            case cc.macro.KEY['7']:\n            case cc.macro.KEY.num7:\n                this.node.emit('input', 7);\n                break;\n            case cc.macro.KEY['8']:\n                if (this.isKeyboardShifed) {\n                    this.node.emit('input', '*');\n                    break;\n                }\n            case cc.macro.KEY.num8:\n                this.node.emit('input', 8);\n                break;\n            case cc.macro.KEY['9']:\n            case cc.macro.KEY.num9:\n                this.node.emit('input', 9);\n                break;\n            case cc.macro.KEY[\"+\"]:\n                this.node.emit('input', '+');\n                break;\n            case cc.macro.KEY.dash:\n            case cc.macro.KEY[\"-\"]:\n                this.node.emit('input', '-');\n                break;\n            case cc.macro.KEY[\"*\"]:\n                this.node.emit('input', '*');\n                break;\n            case cc.macro.KEY.forwardslash:\n            case cc.macro.KEY[\"/\"]:\n                this.node.emit('input', '/');\n                break;\n            case cc.macro.KEY.numdel:\n            case cc.macro.KEY.Delete:\n            case cc.macro.KEY.backspace:\n                this.node.emit('input', 'C');\n                break;\n            case cc.macro.KEY.equal:\n                if (this.isKeyboardShifed) {\n                    this.node.emit('input', '+');\n                    break;\n                }\n            case cc.macro.KEY.enter:\n            case cc.macro.KEY.space:\n            case cc.macro.KEY[\"=\"]:\n                this.node.emit('input', 'Enter');\n                break;\n        }\n    },\n\n    onButtonClicked (button) {\n        switch (button) {\n            case this.button_0:\n                this.node.emit('input', 0);\n                break;\n            case this.button_1:\n                this.node.emit('input', 1);\n                break;\n            case this.button_2:\n                this.node.emit('input', 2);\n                break;\n            case this.button_3:\n                this.node.emit('input', 3);\n                break;\n            case this.button_4:\n                this.node.emit('input', 4);\n                break;\n            case this.button_5:\n                this.node.emit('input', 5);\n                break;\n            case this.button_6:\n                this.node.emit('input', 6);\n                break;\n            case this.button_7:\n                this.node.emit('input', 7);\n                break;\n            case this.button_8:\n                this.node.emit('input', 8);\n                break;\n            case this.button_9:\n                this.node.emit('input', 9);\n                break;\n            case this.button_Plus:\n                this.node.emit('input', '+');\n                break;\n            case this.button_Minus:\n                this.node.emit('input', '-');\n                break;\n            case this.button_Multiple:\n                this.node.emit('input', '*');\n                break;\n            case this.button_Divide:\n                this.node.emit('input', '/');\n                break;\n            case this.button_C:\n                this.node.emit('input', 'C');\n                break;\n            case this.button_Enter:\n                this.node.emit('input', 'Enter');\n                break;\n            default:\n                cc.error('undefined input button');\n        }\n    }\n\n    // update (dt) {},\n});\n","// Learn cc.Class:\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        // foo: {\n        //     // ATTRIBUTES:\n        //     default: null,        // The default value will be used only when the component attaching\n        //                           // to a node for the first time\n        //     type: cc.SpriteFrame, // optional, default is typeof default\n        //     serializable: true,   // optional, default is true\n        // },\n        // bar: {\n        //     get () {\n        //         return this._bar;\n        //     },\n        //     set (value) {\n        //         this._bar = value;\n        //     }\n        // },\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {},\n\n    start () {\n\n    },\n\n    onPlayButtonClicked () {\n        cc.director.loadScene(\"ingame\");\n    }\n\n    // update (dt) {},\n});\n","cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        overlay: cc.Node,\n        frame: cc.Node,\n        scoreText: cc.Label,\n        highScoreText: cc.Label,\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {},\n\n    start () {\n\n    },\n\n    show (score, isHighscore = false) {\n        this.overlay.active = true;\n        this.frame.active = true;\n        this.scoreText.string = 'You scored: ' + score;\n        this.highScoreText.node.active = isHighscore;\n        \n        this.frame.setScale(0.3);\n\n        cc.tween(this.frame)\n        .to(0.4, {scale: {value: 1, easing: 'sineInOut'}})\n        .start();\n    },\n\n    hide (immediate) {\n        this.overlay.active = false;\n        if (immediate) {\n            this.frame.active = false;\n            this.frame.setScale(0);\n        }else {\n            cc.tween(this.frame)\n            .to(0.4, {scale: {value: 0, easing: 'sineInOut'}})\n            .call(() => {\n                this.frame.active = false;\n            })\n            .start();\n        }\n    },\n\n    onBackToMenuClicked () {\n        cc.director.loadScene(\"landing\");\n    },\n\n    onRestartClicked () {\n        this.node.emit('restart');\n    }\n\n    // update (dt) {},\n});\n","var InputFrameController = require('InputFrameController');\nvar helpers = require('./lib/helpers');\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        inputCtor: InputFrameController,\n        leftRiddleText: cc.Label,\n        rightRiddleText: cc.Label,\n        inputText: cc.Label,\n        inputFrame: cc.Sprite\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    onLoad () {\n        this.locked = true;\n        this.inputCtor.node.on('input', this.onInput, this)\n    },\n\n    start () {\n    },\n\n    onInput (value) {\n        if (this.locked) return;\n        if (!this.currentRiddle) return;\n        if (!isNaN(value) && this.currentRiddle.riddlePart !== 'operator') {\n            if (this.input === null) this.input = 0;\n            if (this.input <= 99) {\n                this.input = this.input * 10 + value;\n                this.inputText.string = this.input > 0 ? this.input.toString() : '';\n            }\n        } else if (this.currentRiddle.riddlePart === 'operator' && helpers.isInputOperator(value)) {\n            this.input = value;\n            this.inputText.string = helpers.getInputCharacter(value);\n        } else if (value === 'C') {\n            this.clearInput();\n        } else if (value === 'Enter') {\n            this.node.emit('answer', helpers.checkAnswer(this.currentRiddle, this.input) ? 'correct' : 'incorrect');\n        }\n    },\n\n    clearInput () {\n        this.input = null;\n        this.inputText.string = '';\n    },\n\n    optainNewRiddle (opts) {\n        opts = opts || {};\n        this.currentRiddle = {};\n        this.currentRiddle.operand1 = opts.operand1 || 0;\n        this.currentRiddle.operand2 = opts.operand2 || 0;\n        this.currentRiddle.result = opts.result || 0;\n        this.currentRiddle.operator = opts.operator || '+';\n        this.currentRiddle.riddlePart = opts.riddlePart || 'operator';\n\n        this.clearInput();\n\n        const INPUT_FRAME_PADDING = 8;\n        const INPUT_FRAME_NUMBERIC = 165;\n        const INPUT_FRAME_OPERATOR = 80\n        const INPUT_FRAME_WIDTH = this.currentRiddle.riddlePart === 'operator' ? INPUT_FRAME_OPERATOR : INPUT_FRAME_NUMBERIC;\n\n        switch (this.currentRiddle.riddlePart) {\n            case 'operand1':\n                this.leftRiddleText.string = '';\n                this.rightRiddleText.string = this.currentRiddle.operator + ' ' + this.currentRiddle.operand2 + ' = ' + this.currentRiddle.result;\n                break;\n            case 'operand2':\n                this.leftRiddleText.string = this.currentRiddle.operand1 + ' ' + this.currentRiddle.operator;\n                this.rightRiddleText.string = '= ' + this.currentRiddle.result;\n                break;\n            case 'result':\n                this.leftRiddleText.string = this.currentRiddle.operand1 + ' ' + this.currentRiddle.operator + ' ' + this.currentRiddle.operand2 + ' =';\n                this.rightRiddleText.string = '';\n                break;\n            case 'operator':\n                this.leftRiddleText.string = this.currentRiddle.operand1;\n                this.rightRiddleText.string = this.currentRiddle.operand2 + ' = ' + this.currentRiddle.result;\n                break;\n        }\n        this.inputText.string = '';\n        this.leftRiddleText._forceUpdateRenderData();\n        this.rightRiddleText._forceUpdateRenderData();\n\n        this.inputFrame.node.width = INPUT_FRAME_WIDTH;\n        let contentWidth = this.leftRiddleText.node.width + this.rightRiddleText.node.width + this.inputFrame.node.width + INPUT_FRAME_PADDING * 2;\n\n        this.leftRiddleText.node.x = ( this.leftRiddleText.node.width - contentWidth ) / 2;\n        this.inputFrame.node.x = this.leftRiddleText.node.x + (this.leftRiddleText.node.width + this.inputFrame.node.width) / 2 + INPUT_FRAME_PADDING;\n        this.rightRiddleText.node.x = this.inputFrame.node.x + (this.inputFrame.node.width + this.rightRiddleText.node.width) / 2 + INPUT_FRAME_PADDING * 2;\n        this.inputText.node.x = this.inputFrame.node.x;\n\n        this.locked = false;\n    },\n\n    // update (dt) {},\n});\n","const FRAME_FOR_SCORE_ANIMATION = 20;\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {},\n\n    start () {\n        this.label = this.getComponent(cc.Label);\n        this.displayingScore = 0;\n        this.lerpingScore = 0;\n        this.score = 0;\n        this.label.string = `- SCORE: ${this.displayingScore} -`;\n\n        this.lerpingTime = 0;\n        this.lerpingValue = 0;\n    },\n\n    setScore (value, immediately = false) {\n        this.score = value;\n        if (immediately) {\n            this.lerpingTime = 0;\n            this.lerpingValue = 0;\n            this.lerpingScore = this.score;\n        } else {\n            this.lerpingTime = FRAME_FOR_SCORE_ANIMATION;\n            this.lerpingValue = (this.score - this.lerpingScore) / FRAME_FOR_SCORE_ANIMATION\n        }\n    },\n\n    update (dt) {\n        if (this.lerpingTime <= 0) {\n            this.lerpingValue = 0;\n            this.lerpingScore = this.score;\n        } else if (this.lerpingTime > 0) {\n            this.lerpingScore += this.lerpingValue;\n            this.lerpingTime--;\n        }\n        if (this.displayingScore != this.lerpingScore) {\n            this.displayingScore = this.lerpingScore;\n            this.label.string = `-SCORE: ${~~this.displayingScore} -`;\n        }\n    },\n});\n","module.exports = { \n  ROUND_DURATION: 60000, \n  CHAIN_DURATION: 3000, \n  DIFFICULTY_STEP: 5,\n  SCORING: 7,\n  MAX_CHAIN: 5\n}","module.exports.isInputOperator = function (value) {\n    return value === '+' || value === '-' || value === '*' || value === '/';\n};\n\nmodule.exports.getInputCharacter = function (value) {\n    if (value === '/') return '÷';\n    else if (value === '*') return 'x';\n    else return value;\n}\n\nmodule.exports.checkAnswer = function (riddle, answer) {\n    switch (riddle.riddlePart) {\n        case 'operand1':\n            return parseInt(answer) === riddle.operand1;\n        case 'operand2':\n            return parseInt(answer) === riddle.operand2;\n        case 'result':\n            return parseInt(answer) === riddle.result;\n        case 'operator':\n            if (answer !== riddle.operator) {\n                switch (answer) {\n                    case '+':\n                        return riddle.operand1 + riddle.operand2 === riddle.result;\n                    case '-':\n                        return riddle.operand1 - riddle.operand2 === riddle.result;\n                    case '*':\n                        return riddle.operand1 * riddle.operand2 === riddle.result;\n                    case '/':\n                        return riddle.operand1 / riddle.operand2 === riddle.result;\n                    default:\n                        return false;\n                }\n            } else return true;\n    }\n    return false;\n}\nmodule.exports.formatDurationDHMSObject = function (duration) {\n    duration = Math.max(0, duration);\n    let seconds = Math.floor(0.5 + duration / 1000);\n    let minutes = Math.floor(seconds / 60);\n    let hours = Math.floor(minutes / 60);\n    const days = Math.floor(hours / 24);\n\n    seconds %= 60;\n    minutes %= 60;\n    hours %= 24;\n\n    return {\n        seconds,\n        minutes,\n        hours,\n        days\n    };\n}\n\nmodule.exports.formatTimer = function (time) {\n    const remainingTime = this.formatDurationDHMSObject(time);\n    const { seconds, minutes, hours, days } = remainingTime;\n    let minutesString = minutes > 9 || hours === 0 ? minutes : '0' + minutes;\n    let secondString = seconds > 9 ? seconds : '0' + seconds;\n    if (days >= 1) {\n        return `${days}:${hours}:${minutes}:${seconds}`;\n    }\n    if (hours >= 1) {\n        return `${hours}:${minutesString}:${secondString}`;\n    }\n    return `${minutesString}:${secondString}`;\n}\n","//gamplay related\nconst MULTIPLE_DIVIDE_INCLUDED_DIFFICULTY = 2;\n\nmodule.exports = function (difficulty, rand) {\n  let type = rand.range(difficulty >= MULTIPLE_DIVIDE_INCLUDED_DIFFICULTY ? 4 : 2);\n  let riddleType = rand(4);\n  let minValue = difficulty * 3;\n  let maxValue = difficulty * 10;\n  let result = 0;\n  let operand1 = 0;\n  let operand2 = 0;\n  let operator = '';\n  if (type === 0) {\n    operator = '+';\n    result = rand.intBetween(minValue, maxValue);\n    operand1 = rand.intBetween(1, result - 1);\n    operand2 = result - operand1;\n  } else if (type === 1) {\n    operator = '-';\n    operand1 = rand.intBetween(minValue, maxValue);\n    operand2 = rand.intBetween(1, operand1 - 1);\n    result = operand1 - operand2;\n  } else if (type === 2) {\n    operator = '*';\n    result = rand.intBetween(minValue, maxValue);\n    operand1 = rand.intBetween(2, result / 2 - 2);\n    operand2 = Math.round(result / operand1);\n    result = operand1 * operand2;\n  } else if (type === 3) {\n    operator = '/';\n    operand1 = rand.intBetween(minValue, maxValue);\n    operand2 = rand.intBetween(2, operand1 / 2 - 2);\n    result = Math.round(operand1 / operand2);\n    operand1 = result * operand2;\n  }\n  let riddlePart = 'result';\n  switch (riddleType) {\n    case 0:\n      riddlePart = 'result'\n      break;\n    case 1:\n      riddlePart = 'operand1'\n      break;\n    case 2:\n      riddlePart = 'operand2'\n      break;\n    case 3:\n      riddlePart = 'operator'\n      break;\n  };\n\n  return { \n    result, \n    operand1,\n    operand2,\n    operator,\n    riddlePart\n  }\n}\n"],"file":"index.js"}